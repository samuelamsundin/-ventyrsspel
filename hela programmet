import random as rand
import time, sys

def skrivandetext(text):
    for bokstäver in text:
        sys.stdout.write(bokstäver)
        sys.stdout.flush()
        time.sleep(0.02)

def skrivandeinput(text):
    for bokstäver in text:
        sys.stdout.write(bokstäver)
        sys.stdout.flush()
        time.sleep(0.02)
    value = input()
    return value

#Deklarerar att inventoryn från början är tomt 
inventory = []

#En del som anger vad man kan hitta i en kista, som sedan delas upp i helande items och styrkebonus. Vilket senare används när man avgör vad man hittar för något.
kistitems = ["en helande dryck", "ett svärd", "en blå ring", "en krona", "en rustning", "en sköld", "ett magiskt bandage", "en amulet", "en röd ring"]
helande_items = ["en helande dryck", "en blå ring", "ett magiskt bandage", "en amulet"]
str_items = ["ett svärd", "en krona", "en rustning", "en sköld", "en röd ring"]
kroppsdelar = ["bålen", "vänsterben", "högerben", "vänsterarm", "högerarm", "huvud"]

Monster = [["en drake", "draken"], ["en ork", "orken"], ["en ödlemänniska", "ödlemänniskan"], ["en varg", "vargen"], ["ett spöke", "spöket"], ["en zombie", "zombien"]]
#Dessa listor separerar monster, då alla monster förutom spöket slutar på "en" eller "an"

x = [0, 1, 3, 5, 2]
y = [4]

#En del som skapar klssen spelare med diverse attribut. Och som definierar vilket kroppsdel som kommer bli träffad och vad som händer då. 

class Player():
    def __init__(self, namn, HP_huvud, HP_bål, HP_vänsterarm, HP_högerarm, HP_vänsterben, HP_högerben, level, styrka):   
        self.namn = namn
        self.HP_huvud = HP_huvud
        self.HP_bål = HP_bål
        self.HP_vänsterarm = HP_vänsterarm
        self.HP_högerarm = HP_högerarm
        self.HP_vänsterben = HP_vänsterben
        self.HP_högerben = HP_högerben
        self.level = level
        self.styrka = styrka

#Slumpar vilken kroppsdel som ska ta skada, subtraherar skadan med HP, blir det mindre än 0 ändras HP till 0, retunerar också vilken kroppsdel som tagit skadda
    def träff_del(self, skada):
        träffdel = rand.randint(1, 11)
        if träffdel == 1 or träffdel == 2:
            if self.HP_vänsterben < skada:
                self.HP_vänsterben = 0
            else:
                self.HP_vänsterben = self.HP_vänsterben - skada
            if self.HP_vänsterben <= 0:
                if "vänsterben" in döda_kroppsdelar:
                    "inget händer"
                else:
                    döda_kroppsdelar.append("vänsterben")
            return "vänsterbenet"
        
        elif träffdel == 3 or träffdel == 4:
            if self.HP_högerben < skada:
                self.HP_högerben = 0
            else:
                self.HP_högerben= self.HP_högerben - skada
            if self.HP_högerben <= 0:
                if "högerben" in döda_kroppsdelar:
                    "inget händer"
                else:
                    döda_kroppsdelar.append("högerben")
            return "högerbenet"
        
        elif träffdel == 5 or träffdel == 6:
            if self.HP_bål < skada:
                self.HP_bål = 0
            else:
                self.HP_bål = self.HP_bål - skada
            if self.HP_bål <= 0:
                if "bålen" in döda_kroppsdelar:
                    "inget händer"
                else:
                    döda_kroppsdelar.append("bålen")
            return "bålen"
        
        elif träffdel == 7 or träffdel == 8:
            if self.HP_vänsterarm < skada:
                self.HP_vänsterarm = 0
            else:
                self.HP_vänsterarm = self.HP_vänsterarm - skada
            if self.HP_vänsterarm <= 0:
                if "vänsterarm" in döda_kroppsdelar:
                    "inget händer"
                else:
                    döda_kroppsdelar.append("vänsterarm")
            return "vänsterarmen"
        
        elif träffdel == 9 or träffdel == 10:
            if self.HP_högerarm < skada:
                self.HP_högerarm = 0
            else:
                self.HP_högerarm = self.HP_högerarm - skada
            if self.HP_högerarm <= 0:
                if "högerarm" in döda_kroppsdelar:
                    "inget händer"
                else:
                    döda_kroppsdelar.append("högerarm")
            return "högerarmen"
        
        else:
            if self.HP_huvud < skada:
                self.HP_huvud = 0
            else:
                self.HP_huvud = self.HP_huvud - skada
            return "huvudet"


#Ändrar spelarens namn
    def nya_namnet(self):
        nytt_namn = skrivandeinput("Vad ska din karatär heta?")
        nytt_namn = nytt_namn.title()
        self.namn = nytt_namn

#Kollar om listan med kroppsdelar som har 0 hp är 2 eller om huvudet har 0 hp
    def Döda_kroppsdelar(self):
        if self.HP_huvud <= 0:
            return True
        elif len(döda_kroppsdelar) == 2:
            return True
        else:
            return False

#Funktionen antingen adderar mängden som man vill heala eller ändrar HP till max om healen plus det aktulla HP är mer än max HP för den kroppsdelen
        
def heala_kroppsdel(kroppsdel, mängd_heal):
    if kroppsdel == "bålen":
        if (A_Player.HP_bål + mängd_heal) > 15:
            A_Player.HP_bål = 15
        else:
            A_Player.HP_bål = A_Player.HP_bål + mängd_heal
            
    elif kroppsdel == "vänsterben":
        if (A_Player.HP_vänsterben + mängd_heal) > 10:
            A_Player.HP_vänsterben = 10
        else:
            A_Player.HP_vänsterben = A_Player.HP_vänsterben + mängd_heal
        
    elif kroppsdel == "högerben":
        if (A_Player.HP_högerben + mängd_heal) > 10:
            A_Player.HP_högerben = 10
        else:
            A_Player.HP_högerben = A_Player.HP_högerben + mängd_heal
        
    elif kroppsdel == "vänsterarm":
        if (A_Player.HP_vänsterarm + mängd_heal) > 10:
            A_Player.HP_vänsterarm = 10
        else:
            A_Player.HP_vänsterarm = A_Player.HP_vänsterben + mängd_heal
        
    elif kroppsdel == "högerarm":
        if (A_Player.HP_högerarm + mängd_heal) > 10:
            A_Player.HP_högerarm = 10
        else:
            A_Player.HP_högerarm = A_Player.HP_högerarm + mängd_heal
            
    else:
        if (A_Player.HP_huvud + mängd_heal) > 15:
            A_Player.HP_huvud = 15
        else:
            A_Player.HP_huvud = A_Player.HP_huvud + mängd_heal
    if kroppsdel in döda_kroppsdelar:
        döda_kroppsdelar.remove(kroppsdel)
        
    

#En del som skapar klassen "item" som deklarerar namn samt bonusar på föremål som spelaren kan hitta under spelets gång  
        
class Item(): 
    def __init__(self, name, STR_bonus, healing):
        self.name = name
        self.STR_bonus = STR_bonus
        self.healing = healing

        #Sätter ny bonus för antingen healing eller styrka

    def set_healing(self, ny_heal):
        self.healing = ny_heal

    def set_STR_bonus(self, ny_styrka):
        self.STR_bonus = ny_styrka

        #Retunerar ett föremåls bonus

    def get_healing(self):
        return self.healing

    def get_STR_bonus(self):
        return self.STR_bonus

    #get_values skriver namn, styrke bonus och healing bonus för ett visst item
    
    def get_values(self):
        skrivandetext(self.name)
        skrivandetext(self.STR_bonus)
        skrivandetext(self.healing)
        skrivandetext("")

#Denna del tar reda på vilket föremål och kör antingen funktionen set_healinh eller set_STR_bonus för det förmålet, vilken funktion som körs beror på itemet

def ny_self_bonus(item_b, ny_bonus):
    if item_b == "en blå ring":
        BlåRing_Item.set_healing(ny_bonus)
    elif item_b == "en helande dryck":
        Enhelandedryck_Item.set_healing(ny_bonus)
    elif item_b == "ett svärd":
        EttSvärd_Item.set_STR_bonus(ny_bonus)
    elif item_b == "en krona":
        EnKrona_Item.set_STR_bonus(ny_bonus)
    elif item_b == "en rustning":
        EnRustning_Item.set_STR_bonus(ny_bonus)
    elif item_b == "en sköld":
        EnSköld_Item.set_STR_bonus(ny_bonus)
    elif item_b == "ett magiskt bandage":
        EttMagisktBandage_Item.set_healing(ny_bonus)
    elif item_b == "en amulet":
        EnAmulet_Item.set_healing(ny_bonus)
    else:
        EnRödRing_Item.set_STR_bonus(ny_bonus)

#Tar reda på vilket item och kör antingen funktionen get_healing eller get_STR_bonus för det föremålet, vilken funktion som körs beror på vilket typ av föremål

def get_self_bonus(check_item):
    if check_item == "en blå ring":
        get_bonus = BlåRing_Item.get_healing()
    elif check_item == "en helande dryck":
        get_bonus = Enhelandedryck_Item.get_healing()
    elif check_item == "ett svärd":
        get_bonus = EttSvärd_Item.get_STR_bonus()
    elif check_item == "en krona":
        get_bonus = EnKrona_Item.get_STR_bonus()
    elif check_item == "en rustning":
        get_bonus = EnRustning_Item.get_STR_bonus()
    elif check_item == "en sköld":
        get_bonus = EnSköld_Item.get_STR_bonus()
    elif check_item == "ett magiskt bandage":
        get_bonus = EttMagisktBandage_Item.get_healing()
    elif check_item == "en amulet":
        get_bonus = EnAmulet_Item.get_healing()
    else:
        get_bonus = EnRödRing_Item.get_STR_bonus()
    return get_bonus

#Skriver ut namn och vilken bonus ett föremål har
def skrivandetextItems():
    if len(inventory) > 0:
        for i in inventory:
            BonuS = get_self_bonus(i)
            I = i.title()
            if i in helande_items:
                skrivandetext(f"{I} har {BonuS} i healing\n")
            else:
                 skrivandetext(f"{I} har {BonuS} i styrka\n")
    else:
        skrivandetext("Ditt inventory är tomt")

#Lägger ihop alla styrke items bonus med spelarens styrka
def total_styrka():
    den_totala_styrkan = A_Player.styrka
    for i in inventory:
        if i in str_items:
            den_totala_styrkan = den_totala_styrkan + get_self_bonus(i)
    return den_totala_styrkan
            
            
#Lägger till alla föremål i klassen item             
BlåRing_Item = Item("en blå ring", 0, 0)
Enhelandedryck_Item = Item("en helande dryck", 0, 0)
EttSvärd_Item = Item("ett svärd", 0, 0)
EnKrona_Item = Item("en krona", 0, 0)
EnRustning_Item = Item("en rustning", 0, 0)
EnSköld_Item = Item("en sköld", 0, 0)
EttMagisktBandage_Item = Item("ett magiskt bandage", 0, 0)
EnAmulet_Item = Item("en amulet", 0, 0)
EnRödRing_Item = Item("en röd ring", 0, 0)



#Ett tomt inventory dit kroppsdelar hamnar om deras hp går till noll

döda_kroppsdelar = []


#Varje gång man ska välja vad man vill göra körs denna del.

def valet():
    #Monster_parameter är monsters styrka.
    Monster_parameter = 10
    while True:
        if A_Player.Döda_kroppsdelar() == True:
            break
        if A_Player.level == 10:
            break
        Valet = skrivandeinput("""\nVad vill du göra?
    1. Se din karaktärs egenskaper?
    2. Se ditt inventory?
    3. Välja en dörr?
    4. Använda ett helande item?

    """)
        if Valet == "1":
            skrivandetext(f"""
    I högerbenet har du {A_Player.HP_högerben}hp
    I vänsterbenet har du {A_Player.HP_vänsterben}hp
    I högerarmen har du {A_Player.HP_högerarm}hp
    I vänsterarmen har du {A_Player.HP_vänsterarm}hp
    I bålen har du {A_Player.HP_bål}hp
    I huvudet har du {A_Player.HP_huvud}hp

    Du har förlorat {döda_kroppsdelar}

    Din styrka är {total_styrka()}
    
    Du är i level {A_Player.level}\n""")
        elif Valet == "2":
            if len(inventory) > 0:
                skrivandetextItems()
                print(inventory)
                while True:
                    ta_bort = skrivandeinput("\nVill du plocka bort något?\n")
                    ta_bort = ta_bort.lower()
                    if ta_bort == "ja":
                        skrivandetext("Svara med en siffra mellan 1 till 5\n")
                        borttaget_item = skrivandeinput("Vilket item vill du plocka bort?")
                        if borttaget_item in ["1","2","3","4","5"]:
                            borttaget_item = int(borttaget_item)
                            borttaget_item = borttaget_item - 1
                            lista_för_items = len(inventory) - 1
                            if borttaget_item <= lista_för_items:
                                inventory.pop(borttaget_item)
                        break
                    elif ta_bort == "nej":
                        break
                    else:
                        continue
            else:
                skrivandetext("Du har inget i ditt inventory")   
                
        elif Valet == "3":
            while True:
                val_dörr = skrivandeinput("\nVilken dörr vill du välja? 1, 2 eller 3?\n")
                if val_dörr in ["1","2","3"]:
                    Dörr = rand.randint (1,3)
                    if Dörr == 1:
                        vinn_förlust = monster(A_Player, Monster_parameter)
                        if vinn_förlust == "win":
                            Monster_parameter = Monster_parameter + 3
                            vinn_förlust = ""
                        break
                    elif Dörr == 2:
                        fälla(A_Player)
                        break
                    else:
                        kista(A_Player)
                        break
                else:
                    skrivandetext("Otillåtet svar")
        elif Valet == "4":
            time.sleep(2)
            hela()
        else:
            skrivandetext("Otillåtet svar")
  

#En funktion som körs när man helar sig själv.

def hela():
    heal_items = []
    for i in inventory:
        if i in helande_items:
            heal_items.append(i)
    if len(heal_items) < 1:
        skrivandetext("\nDu har inga föremål att hela dig själv med")
        
    else:
        antal_heal_items = len(heal_items)
        print(heal_items)
        while True:
            val_item = skrivandeinput("\nVilket nummer på item vill du använda?(använd siffror)\n")
            if val_item in ["1","2","3","4","5"]:
                val_item = int(val_item)
                val_item = val_item - 1
                valt_item = heal_items.pop(val_item)
                break
            else:
                continue
        while True:
            print(kroppsdelar)
            helad_kroppsdel = skrivandeinput("\nVilken kropppsdel vill du hela?\n")
            helad_kroppsdel = helad_kroppsdel.lower()
            if helad_kroppsdel in kroppsdelar:
                mängd_heal = get_self_bonus(valt_item)
                heala_kroppsdel(helad_kroppsdel, mängd_heal)
                ny_self_bonus(valt_item, 0)
                inventory.remove(valt_item)
                break
            else:
                continue
                    

#Allt som händer när man stöter på ett monster

def monster(self, Monster_parameter):
    Monster_namn = rand.randint(0,len(Monster) - 1)
    skrivandetext(f"\n{self.namn} stöter på {Monster[Monster_namn][0]}!")
    time.sleep(3)
    m_styrka = rand.randint(1, Monster_parameter)
    if m_styrka > total_styrka():
        Skada = A_Player.träff_del(m_styrka)
        skrivandetext(f"\n{Monster[Monster_namn][1].title()} är för stark och {self.namn} tappar {m_styrka} hp i {Skada}")
        fråga2 = skrivandeinput("\nDu är skadad. Vill du hela dig själv?\n")
        fråga2 = fråga2.lower()
        while True:
            if fråga2 == "ja":
                hela()
                break
            elif fråga2 == "nej":
                break
            else:
                continue
    elif m_styrka == total_styrka():
        skrivandetext(f"\nNi är lika starka och {Monster[Monster_namn][1]} springer iväg")
    else:
        if Monster_namn in x:
            skrivandetext(f"\n{self.namn} är starkare än {Monster[Monster_namn][1]} och besegrar den. {self.namn} går upp en level")
        else:
            skrivandetext(f"\n{self.namn} är starkare än {Monster[Monster_namn][1]} och besegrar det. {self.namn} går upp en level")
        self.level = self.level + 1
        return "win"

#En funktion som tar hand om vad som händer när man hittar en kista
        
def kista(self):
    bonus = rand.randint(1, 10)
    skrivandetext("\nI rummet hittar du en kista!")
    item = rand.choice(kistitems)
    skrivandetext(f"\nI kistan hittar du {item} med {bonus} i bonus.")
    time.sleep(2)
    while True:
        kist_val = skrivandeinput("\nVill du lägga till den i ditt inventory?")
        kist_val = kist_val.lower()
        if kist_val == "ja":
            if item in inventory:
                skrivandetext(f"\nDu har redan ett sådant item, det itemet du har just nu har bonusen {get_self_bonus(item)}\n")
                while True:
                    svar = skrivandeinput("Vill du byta ut det?")
                    svar = svar.lower()
                    if svar == "ja":
                        ny_self_bonus(item, bonus)
                        item = item.title()
                        skrivandetext(f"\n{item} med en bonus på {bonus} byttes ut mot det du redan hade")
                        break
                    elif svar == "nej":
                        item = item.lower()
                        skrivandetext(f"\nDu behåller det gamla itemet")
                        break
                    else:
                        skrivandetext("Otillåtet svar")
                        continue
                break
            if len(inventory) == 5:
                skrivandetext("\nDu kan inte ha fler föremål på dig")
                print(inventory)
                while True:
                    utbyte = skrivandeinput("\nVill du byta ut något?")
                    utbyte = utbyte.lower()
                    if utbyte == "ja":
                        while True:
                            utbytt_item = skrivandeinput("\nVilket föremål vill du plocka bort? Svara med en siffra mellan 1 och 5\n")
                            if utbytt_item in ["1","2","3","4","5"]:
                                utbytt_item = int(utbytt_item)
                                utbytt_item = (utbytt_item - 1)
                                borttaget_item = inventory.pop(utbytt_item)
                                ny_self_bonus (borttaget_item, 0)
                                skrivandetext("\nFöremålet du valde har tagits bort och bytts ut mot det nya")
                                inventory.append(item)
                                ny_self_bonus(item, bonus)
                                break
                            else:
                                continue
                        break
                    elif utbyte == "nej":
                        skrivandetext("\nDu behöll ditt föremål")
                        break
                    else:
                        continue
            else:
                inventory.append(item)
                ny_self_bonus(item, bonus)
            break
        elif kist_val == "nej":
            break
        else:
            skrivandetext("Otillåtet svar")
            continue
                


#En funktion som tar hand om vad som händer när man stöter på en fälla

def fälla(self):
    while True:
        time.sleep(4)
        skrivandetext("\nDet här rummet verkar tomt...")
        time.sleep(6)
        skrivandetext(f"\nHoppsan! {self.namn} stöter på en fälla!")
        skada = rand.randint(1, 10)
        Skada = A_Player.träff_del(skada)
        skrivandetext(f"\nDu tar {skada} skada i {Skada}")
        while True:
            fråga1 = skrivandeinput("\nDu är skadad. Vill du hela dig själv?\n")
            fråga1 = fråga1.lower()
            if fråga1 == "ja":
                time.sleep(1.5)
                hela()
                break
            elif fråga1 == "nej":
                break
            else:
                skrivandetext("Otillåtet svar")
                continue
        break
        
    

#Huvudprogram

A_Player = Player("name",15,15,10,10,10,10,1,5)
A_Player.nya_namnet()
skrivandetext(f"{A_Player.namn} är en gnom som är sugen på äventyr och beger sig därför till de mörka bergen strax utanför byn\n")
skrivandetext("Välkomen. Stig in i om du vågar...\n")
time.sleep(2)
valet()
skrivandetext("")
if A_Player.level == 10:
    skrivandetext(f"{A_Player.namn} överlever sina äventyr och kommer tillbaka till byn där det berättas historier i flera årtionden! \nGrattulerar du vann! \nDetta spel är skapat av Tilde Andersson och Samuel Sundin i klass Te21C på Åva gymnasium")
else:
    skrivandetext(f"{A_Player} förblöder ensam i en grotta. Spela gärna igen")
